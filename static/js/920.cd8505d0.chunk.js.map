{"version":3,"file":"static/js/920.cd8505d0.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyled.js","../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactListStyled.js","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n  border: 1px solid black;\n  padding-left: 5px;\n  padding-top: 10px;\n  margin-bottom: 15px;\n`;\n\nexport const StyledInput = styled.input`\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 20px;\n  border: 1px solid grey;\n  outline: none;\n  :hover,\n  :focus {\n    border-color: blue;\n  }\n`;\n\nexport const StyledButton = styled.button`\n  background-color: #fff;\n  border: 1px solid blueviolet;\n  border-radius: 3px;\n  margin-bottom: 20px;\n  transition: background-color 1s;\n  :hover,\n  :focus {\n    background-color: blue;\n  }\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","const selectContacts = state => state.contacts.items;\nconst selectContactsState = state => state.contacts;\n\nconst contactsSelector = {\n  selectContacts,\n  selectContactsState,\n};\n\nexport default contactsSelector;\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport contactsSelector from 'redux/contacts/contactsSelectors';\n\nimport { StyledForm, StyledInput, StyledButton } from './ContactFormStyled';\n\nconst ContactForms = () => {\n  const uniqueId = nanoid();\n\n  const contactsList = useSelector(contactsSelector.selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    const name = event.target.name.value;\n    const number = event.target.number.value;\n\n    const isDuplicateName = contactsList.some(contacts =>\n      contacts.name.toLowerCase().includes(name.toLowerCase())\n    );\n\n    if (isDuplicateName) {\n      toast.error(`${name} is alredy to contacts`);\n      return;\n    }\n\n    const contact = { name, number };\n    event.target.reset();\n\n    dispatch(addContact(contact));\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmitForm}>\n      <label htmlFor={uniqueId}>\n        Name\n        <StyledInput\n          type=\"text\"\n          name=\"name\"\n          id={uniqueId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label htmlFor={uniqueId}>\n        Number\n        <StyledInput\n          type=\"tel\"\n          name=\"number\"\n          id={uniqueId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <StyledButton type=\"submit\">Add contact</StyledButton>\n    </StyledForm>\n  );\n};\n\nexport default ContactForms;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { renderFilter } from 'redux/filter/filterSlice';\n\nimport { StyledInput } from '../ContactForm/ContactFormStyled';\n\nconst Filter = () => {\n  const [filter, setFilter] = useState('');\n  const dispatch = useDispatch();\n\n  const changeFilterData = event => {\n    const { value } = event.currentTarget;\n    setFilter(value);\n    dispatch(renderFilter(value));\n  };\n\n  return (\n    <label>\n      Find contacts by name\n      <StyledInput type=\"text\" value={filter} onChange={changeFilterData} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const StyledContactList = styled.ul`\n  width: 450px;\n`;\n\nexport const StyledContactItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n  width: 100px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport contactsSelector from 'redux/contacts/contactsSelectors';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nimport Loader from 'components/Loader/Loader';\nimport { StyledButton } from '../ContactForm/ContactFormStyled';\nimport {\n  StyledContactList,\n  StyledContactItem,\n  Wrapper,\n} from './ContactListStyled';\n\nconst ContactList = () => {\n  const contactsList = useSelector(contactsSelector.selectContactsState);\n  const { isLoading, error, items } = contactsList;\n\n  const contactsArray = useSelector(contactsSelector.selectContacts);\n\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const visibleContacts = items.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {!isLoading && !contactsArray.length > 0 && (\n        <div>Oops, your contact list is empty. Add someone</div>\n      )}\n\n      <StyledContactList>\n        {visibleContacts.map(({ id, name, number }) => (\n          <StyledContactItem key={id}>\n            <Wrapper>{name}</Wrapper>\n            <Wrapper>{number}</Wrapper>\n\n            <StyledButton\n              onClick={() =>\n                dispatch(deleteContact(id))\n                  .unwrap()\n                  .then(() => toast.success('Contact removed'))\n                  .catch(() => toast.error('Something went wrong...Try again.'))\n              }\n            >\n              Delete\n            </StyledButton>\n          </StyledContactItem>\n        ))}\n      </StyledContactList>\n    </>\n  );\n};\n\nexport default ContactList;\n","import ContactForms from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { Container } from 'components/SharedLayout/SharedLayoutStyled';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container>\n        <ContactForms />\n        <Filter />\n        <ContactList />\n      </Container>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["StyledForm","styled","StyledInput","StyledButton","selectContacts","state","contacts","items","selectContactsState","uniqueId","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","contactsList","useSelector","contactsSelector","dispatch","useDispatch","onSubmit","event","preventDefault","name","target","value","number","some","toLowerCase","includes","toast","contact","reset","addContact","htmlFor","type","pattern","title","required","useState","filter","setFilter","onChange","currentTarget","renderFilter","StyledContactList","StyledContactItem","Wrapper","isLoading","error","contactsArray","visibleContacts","Loader","length","map","onClick","deleteContact","unwrap","then","catch","useEffect","fetchContacts","ContactForm"],"sourceRoot":""}